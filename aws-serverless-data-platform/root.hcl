# =============================================================================
# Terragrunt Root Configuration
# Manages shared configuration, remote state, and provider generation
# =============================================================================

locals {
  # Extract environment and region from path
  parsed_path = regex(".*/environments/([^/]+)/([^/]+)/.*", get_terragrunt_dir())
  environment = local.parsed_path[0]
  region      = local.parsed_path[1]

  # Load and merge YAML configurations in order: common → accounts → environment
  common      = yamldecode(file("${get_repo_root()}/config/common.yaml"))
  accounts    = yamldecode(file("${get_repo_root()}/config/accounts.yaml"))
  env_config  = yamldecode(file("${get_repo_root()}/config/environments/${local.environment}.yaml"))
  
  # Merge configurations with precedence: environment > accounts > common
  config = merge(
    local.common,
    local.accounts[local.environment],
    local.env_config
  )

  # Common tags applied to all resources
  common_tags = merge(
    local.config.tags,
    {
      Environment   = local.environment
      Region        = local.region
      Project       = local.config.project.name
      ManagedBy     = "Terragrunt+Terraform"
      Repository    = local.config.project.repository
    }
  )
}

# =============================================================================
# Remote State Configuration
# =============================================================================
remote_state {
  backend = "s3"
  
  config = {
    bucket         = local.config.terraform.state_bucket
    key            = "${local.environment}/${local.region}/${path_relative_to_include()}/terraform.tfstate"
    region         = local.config.terraform.state_region
    encrypt        = true
    s3_bucket_tags = local.common_tags
    use_lockfile   = true
  }
  
  generate = {
    path      = "backend.tf"
    if_exists = "overwrite_terragrunt"
  }
}

# =============================================================================
# Provider Configuration Generation
# =============================================================================
generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite_terragrunt"
  contents  = <<EOF
# =============================================================================
# AWS Provider Configuration
# Generated by Terragrunt - DO NOT EDIT MANUALLY
# =============================================================================

terraform {
  required_version = "${local.config.terraform.version}"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "${local.config.terraform.aws_provider_version}"
    }
  }
}

provider "aws" {
  region = "${local.region}"
  
  assume_role {
    role_arn = "${local.config.aws.assume_role_arn}"
  }
  
  default_tags {
    tags = ${jsonencode(local.common_tags)}
  }
}

# Additional provider for us-east-1 (required for some global resources)
provider "aws" {
  alias  = "us_east_1"
  region = "us-east-1"
  
  assume_role {
    role_arn = "${local.config.aws.assume_role_arn}"
  }
  
  default_tags {
    tags = ${jsonencode(local.common_tags)}
  }
}
EOF
}

# =============================================================================
# Global Inputs
# =============================================================================
inputs = merge(
  local.config,
  {
    environment = local.environment
    region      = local.region
    account_id  = local.config.aws.account_id
    common_tags = local.common_tags
  }
) 